#include <iostream>
#include "mpi.h"

int main(int argc, char **argv) {
	int rank, n;
	int i = 5, j = 10;
	MPI_Init(&argc, &argv);
	int data = 10;
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
	MPI_Comm_size(MPI_COMM_WORLD, &n);
	if (i > n - 1 || i < 0 || j > n - 1 || j < 0) {
		std::cout << "i and j do not match number of threads." << std::endl;
		MPI_Finalize();
		return 0;
	}
	MPI_Status status;
	if (rank == i) {
		MPI_Send(&data, 1, MPI_INT, 0, 0, MPI_COMM_WORLD);
	}
	if (rank == 0) {
		MPI_Recv(&data, 20, MPI_INT, i, 0, MPI_COMM_WORLD, &status);
		data *= data;
		MPI_Send(&data, 1, MPI_INT, j, 0, MPI_COMM_WORLD);
	}
	if (rank == j) {
		MPI_Recv(&data, 20, MPI_INT, 0, 0, MPI_COMM_WORLD, &status);
		data *= data;
	}
	std::cout << rank << " has data: " << data << std::endl;
	MPI_Finalize();
	return 0;
}